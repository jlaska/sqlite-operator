name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: quay.io
  IMAGE_NAME: jlaska/sqlite-operator

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: make test

    - name: Run lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Quay.io
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Upload Trivy scan results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-results
        path: trivy-results.sarif
        retention-days: 30

  generate-manifests:
    name: Generate Manifests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24'

    - name: Generate manifests
      run: make manifests

    - name: Update image in kustomization
      run: |
        cd deploy
        kustomize edit set image controller=${{ needs.build.outputs.image }}

    - name: Create release manifests
      run: |
        mkdir -p release
        kustomize build deploy > release/sqlite-operator.yaml
        kustomize build deploy/samples > release/samples.yaml

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: manifests
        path: release/
        retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, generate-manifests]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download manifests
      uses: actions/download-artifact@v6
      with:
        name: manifests
        path: release/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          release/sqlite-operator.yaml
          release/samples.yaml
        body: |
          ## SQLite Operator ${{ github.ref_name }}
          
          ### Container Image
          ```
          ${{ needs.build.outputs.image }}
          ```
          
          ### Quick Deployment
          ```bash
          kubectl apply -f sqlite-operator.yaml
          kubectl apply -f samples.yaml
          ```
          
          ### Changes
          See the commit history for detailed changes in this release.
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}